PROJECT TITLE
Dual-Factor Authentication System with Hardware Integration

PROJECT DESCRIPTION
Create a complete, production-ready full-stack authentication system that integrates hardware (ESP32 fingerprint sensor) with a modern web interface. The system should handle dual registration flows (hardware + web), real-time access monitoring, and role-based dashboards.

TECH STACK REQUIREMENTS
Backend
Runtime: Node.js with ES6 modules

Framework: Express.js with modular architecture

Database: MySQL with connection pooling

Serial Communication: SerialPort for ESP32 integration

Authentication: Session-based (no JWT)

Security: bcryptjs, CORS, environment variables

Frontend
Framework: React 18 + TypeScript

Build Tool: Vite

Styling: Tailwind CSS with custom animations

UI Components: Headless UI + Lucide React icons

Charts: Recharts for analytics

State Management: React Context + hooks

DATABASE ARCHITECTURE
Complete Schema
sql
-- Core database
CREATE DATABASE IF NOT EXISTS auth_system;
USE auth_system;

-- Hardware users table (from ESP32)
CREATE TABLE IF NOT EXISTS users (
    id INT PRIMARY KEY,
    finger_id INT NOT NULL UNIQUE,
    password VARCHAR(50) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Access logs from hardware
CREATE TABLE IF NOT EXISTS access_logs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    result ENUM('GRANTED', 'DENIED', 'REGISTERED') NOT NULL,
    note VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Web user profiles
CREATE TABLE IF NOT EXISTS user_profiles (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    mobile VARCHAR(20),
    password_hash VARCHAR(255) NOT NULL,
    role ENUM('admin', 'user') DEFAULT 'user',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Indexes for performance
CREATE INDEX idx_access_logs_user_id ON access_logs(user_id);
CREATE INDEX idx_access_logs_created_at ON access_logs(created_at);
CREATE INDEX idx_user_profiles_email ON user_profiles(email);
BACKEND STRUCTURE & REQUIREMENTS
Project Structure
text
backend/
├── config/
│   ├── database.js      # MySQL connection pool
│   ├── serialport.js    # ESP32 serial configuration
│   └── constants.js     # Application constants
├── controllers/
│   ├── authController.js # Login/register logic
│   ├── userController.js # User management
│   ├── logController.js  # Access logs handling
│   └── hardwareController.js # ESP32 communication
├── routes/
│   ├── authRoutes.js    # Authentication endpoints
│   ├── userRoutes.js    # User management endpoints
│   ├── logRoutes.js     # Log access endpoints
│   └── hardwareRoutes.js # Hardware integration endpoints
├── middleware/
│   ├── authMiddleware.js # Session authentication
│   ├── roleMiddleware.js # Admin/user access control
│   └── validationMiddleware.js # Input validation
├── models/
│   ├── userModel.js     # User data operations
│   ├── logModel.js      # Log data operations
│   └── profileModel.js  # Profile data operations
├── services/
│   ├── serialService.js # ESP32 communication service
│   ├── authService.js   # Authentication business logic
│   └── userService.js   # User management logic
├── utils/
│   ├── helpers.js       # Utility functions
│   ├── validators.js    # Validation functions
│   └── responseHandler.js # Standardized API responses
├── .env                 # Environment variables
├── package.json         # Dependencies and scripts
└── server.js           # Application entry point
Core Backend Features
1. ESP32 Hardware Integration
Real-time serial communication with fingerprint sensor

Handle REG commands (user registration)

Handle LOGIN commands (authentication)

Automatic access logging

Error handling and data validation

2. Authentication System
Session-based authentication (no JWT)

Role-based access control (Admin/User)

Password hashing with bcryptjs

Secure cookie management

3. API Endpoints
javascript
// Authentication
POST /api/register     # Web user registration
POST /api/login        # Web user login  
POST /api/logout       # User logout
GET  /api/me          # Get current user

// User Management
GET  /api/users        # Get all users (Admin only)
GET  /api/users/:id    # Get specific user
PUT  /api/users/:id    # Update user (Admin)

// Access Logs
GET  /api/logs         # Recent access logs
GET  /api/logs/all     # All logs (Admin only)
GET  /api/logs/user/:user_id # User-specific logs

// Hardware Integration
GET  /api/hardware/status    # ESP32 connection status
POST /api/hardware/simulate  # Simulate hardware events

// Utility
GET  /api/user-by-email      # Find user by email
GET  /api/stats             # System statistics
4. Session Management
javascript
// Session configuration
{
  secret: process.env.SESSION_SECRET,
  resave: false,
  saveUninitialized: false,
  cookie: { 
    secure: false, // true in production
    maxAge: 2 * 60 * 60 * 1000 // 2 hours
  }
}
FRONTEND STRUCTURE & REQUIREMENTS
Project Structure
text
frontend/
├── src/
│   ├── components/
│   │   ├── auth/
│   │   │   ├── LoginForm.tsx
│   │   │   ├── RegisterForm.tsx
│   │   │   └── AuthGuard.tsx
│   │   ├── dashboard/
│   │   │   ├── AdminDashboard.tsx
│   │   │   ├── UserDashboard.tsx
│   │   │   ├── LiveStatus.tsx
│   │   │   ├── StatsCards.tsx
│   │   │   └── RecentLogs.tsx
│   │   ├── layout/
│   │   │   ├── Header.tsx
│   │   │   ├── Sidebar.tsx
│   │   │   ├── Navbar.tsx
│   │   │   └── Layout.tsx
│   │   ├── management/
│   │   │   ├── UserTable.tsx
│   │   │   ├── LogsTable.tsx
│   │   │   └── ProfileForm.tsx
│   │   └── common/
│   │       ├── LoadingSpinner.tsx
│   │       ├── Modal.tsx
│   │       ├── Button.tsx
│   │       └── Card.tsx
│   ├── pages/
│   │   ├── Login.tsx
│   │   ├── Register.tsx
│   │   ├── Dashboard.tsx
│   │   ├── Users.tsx
│   │   ├── Logs.tsx
│   │   ├── Profile.tsx
│   │   └── NotFound.tsx
│   ├── hooks/
│   │   ├── useAuth.ts
│   │   ├── useWebSocket.ts
│   │   ├── useUsers.ts
│   │   └── useLogs.ts
│   ├── contexts/
│   │   ├── AuthContext.tsx
│   │   └── ThemeContext.tsx
│   ├── services/
│   │   ├── api.ts
│   │   ├── auth.ts
│   │   └── websocket.ts
│   ├── types/
│   │   └── index.ts
│   ├── utils/
│   │   ├── constants.ts
│   │   ├── helpers.ts
│   │   └── validators.ts
│   ├── styles/
│   │   └── index.css
│   └── main.tsx
├── public/
├── package.json
├── vite.config.ts
├── tailwind.config.js
└── tsconfig.json
Frontend Features
1. Authentication Pages
Login Page: Email/Password with role-based redirect

Register Page: User registration with hardware ID mapping

Form validation with real-time feedback

2. Dashboard Pages
Admin Dashboard:

System statistics cards

Real-time access monitoring

User management interface

Comprehensive analytics charts

User Dashboard:

Personal access history

Profile management

Recent activity

3. Real-time Features
Live access log updates

WebSocket connection status

Automatic data refresh

Hardware status indicators

4. UI/UX Requirements
Responsive Design: Mobile-first approach

Dark/Light Mode: Toggleable theme

Loading States: Skeleton loaders

Error Handling: User-friendly error messages

Animations: Smooth transitions with Tailwind

INTEGRATION SPECIFICATIONS
Dual Registration Flow
Hardware First: User registers fingerprint via ESP32

ID Mapping: Same user_id used for web registration

Profile Completion: Web form collects email, mobile, password

Data Linking: user_id connects hardware and web data

Authentication Scenarios
javascript
// Scenario 1: Hardware Login
ESP32 → Fingerprint → Serial Data → Access Log → Real-time Update

// Scenario 2: Web Login
Web Form → Session Creation → Role-based Redirect → Dashboard

// Scenario 3: Admin Access
Admin Login → User Management → System Analytics → Log Monitoring
Real-time Communication
WebSocket/Socket.io for live hardware events

Auto-refresh dashboard components

Live user count and system status

ENVIRONMENT CONFIGURATION
Backend .env
env
# Server Configuration
PORT=3000
NODE_ENV=development

# Database Configuration
DB_HOST=localhost
DB_USER=root
DB_PASS=your_mysql_password
DB_NAME=auth_system

# Session Configuration
SESSION_SECRET=your_session_secret_key_here

# Serial Port Configuration
SERIAL_PORT=COM3
SERIAL_BAUD=115200

# Frontend URL
FRONTEND_URL=http://localhost:5173

# API Configuration
API_VERSION=v1
Frontend .env
env
VITE_BACKEND_URL=http://localhost:3000
VITE_APP_NAME="Dual-Factor Authentication System"
VITE_WS_URL=ws://localhost:3000
DEPLOYMENT & TESTING INSTRUCTIONS
Setup Commands
bash
# Database Setup
mysql -u root -p
CREATE DATABASE auth_system;
USE auth_system;
# Run the provided schema

# Backend Setup
cd backend
npm install
cp .env.example .env
# Edit .env with your configuration
npm run dev

# Frontend Setup  
cd frontend
npm install
npm run dev
Testing Checklist
Database connections established

ESP32 serial communication working

User registration (both hardware and web)

Login functionality with session management

Role-based access control

Real-time dashboard updates

Data persistence in MySQL

Error handling and validation

Responsive design on all devices

EXPECTED OUTPUT
Generate a complete, working full-stack application that includes:

Backend: Modular Express.js server with all required endpoints

Frontend: React TypeScript application with all pages and components

Database: Complete MySQL schema with sample data

Integration: Fully functional hardware-web communication

Documentation: Setup instructions and API documentation

The application should be immediately runnable with npm install and npm run dev in both frontend and backend directories, with clear instructions for database setup and hardware simulation.